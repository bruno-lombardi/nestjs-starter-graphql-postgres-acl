input RoleInput {
  title: String!
  name: String!
  description: String
}

input PermissionInput {
  id: ID
  name: String!
  resource: String!
}

input PaginateRoleInput {
  page: Int!
  limit: Int!
  name: String
  title: String
}

type Permission {
  id: ID!
  name: String!
  resource: String!
  roles: [Role!]
}

type Role {
  id: ID!
  name: String!
  title: String!
  description: String
  users: [User!]
  permissions: [Permission!]
}

type PaginateRoleResult {
  page: Int!
  limit: Int!
  totalPages: Int!
  count: Int!
  data: [Role!]
}

type Mutation {
  createRole(createInput: RoleInput): Role
  deleteRole(id: ID!): Boolean
  updateRole(id: ID!, updateInput: RoleInput): Role
  updateRolePermissions(id: ID!, permissions: [PermissionInput!]): Role
}

type Query {
  roles(input: PaginateRoleInput): PaginateRoleResult!
  role(id: ID!): Role
}